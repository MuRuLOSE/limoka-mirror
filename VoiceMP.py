__version__ = (1, 0, 5)

#            ¬© Copyright 2024
#           https://t.me/HikkTutor 
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
#‚îè‚îì‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îè‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îè‚îì‚îè‚îì‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îè‚îõ‚îó‚îì‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îó‚îÅ‚îõ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îì‚îó‚îõ‚îÉ‚îÉ‚îó‚îõ‚îè‚îì‚îè‚îì‚îó‚îì‚îè‚îõ‚îè‚îÅ‚îÅ‚îì‚îè‚îÅ‚îì‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îè‚îÅ‚îì‚îÉ‚î£‚î´‚îÉ‚îó‚îõ‚îõ‚îÉ‚îó‚îõ‚îõ‚îÅ‚îÅ‚îÉ‚îÉ‚îÅ‚îÅ‚îÉ‚îÉ‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÅ‚îÉ‚îè‚îì‚îÉ‚îÉ‚îè‚îõ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÉ‚îÉ‚îÅ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îè‚îì‚îì‚îÉ‚îè‚îì‚îì‚îÅ‚îè‚îõ‚îó‚îì‚îÅ‚îÉ‚îó‚îõ‚îÉ‚îÅ‚îÉ‚îó‚îì‚îÉ‚îó‚îõ‚îÉ‚îÉ‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îó‚îõ‚îÅ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îó‚îõ‚îÅ‚îó‚îÅ‚îÅ‚îõ‚îÅ‚îó‚îÅ‚îÅ‚îõ‚îÅ‚îó‚îÅ‚îõ‚îó‚îÅ‚îÅ‚îõ‚îó‚îõ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# load from: t.me:HikkTutor 
# meta developer:@HikkTutor 
# author: vsakoe
# name: VoiceMP

import os
import json
from pydub import AudioSegment
from telethon.tl.types import Message, DocumentAttributeVideo, DocumentAttributeSticker
from .. import loader, utils
from ..inline.types import InlineCall

class VoiceMP(loader.Module):
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""

    strings = {"name": "VoiceMP"}

    def __init__(self):
        self.records_dir = os.path.join(os.path.expanduser("~"), "voice_records")
        self.records_file = os.path.join(self.records_dir, "records.json")
        self.saved_records = self.load_saved_records()

        if not os.path.exists(self.records_dir):
            os.makedirs(self.records_dir)

    def load_saved_records(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.records_file):
            with open(self.records_file, "r") as f:
                return json.load(f)
        return {}

    def save_records(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"""
        with open(self.records_file, "w") as f:
            json.dump(self.saved_records, f)

    def get_audio_duration(self, file_path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        audio = AudioSegment.from_file(file_path)
        return int(audio.duration_seconds)

    def is_unsupported(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º (–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–µ MP3 –∏ –Ω–µ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ)"""
        if message.gif or message.sticker:
            return True
        if message.video:
            for attr in message.video.attributes:
                if isinstance(attr, DocumentAttributeVideo) and attr.round_message:
                    return True
        if not (message.voice or 
                (message.file and message.file.name and message.file.name.endswith('.mp3')) or 
                message.video):
            return True
        return False

    async def convert_to_mp3(self, message: Message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MP3"""
        status_msg = await message.respond("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
        file_path = await self.client.download_media(message.media)
        audio = AudioSegment.from_file(file_path)

        if self.get_audio_duration(file_path) > 180:
            await status_msg.edit("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã.")
            os.remove(file_path)
            return

        mp3_path = file_path.replace('.ogg', '.mp3')
        audio.export(mp3_path, format="mp3")
        os.remove(file_path)

        await status_msg.edit("–û—Ç–ø—Ä–∞–≤–ª—è—é MP3 —Ñ–∞–π–ª...")
        await message.respond(file=mp3_path)
        os.remove(mp3_path)

    async def convert_to_voice(self, message: Message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MP3 –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        status_msg = await message.respond("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ...")
        file_path = await self.client.download_media(message.media)
        audio = AudioSegment.from_file(file_path)

        if self.get_audio_duration(file_path) > 180:
            await status_msg.edit("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã.")
            os.remove(file_path)
            return

        voice_path = file_path.replace('.mp3', '.ogg')
        audio.export(voice_path, format="ogg", codec="libopus")
        os.remove(file_path)

        await status_msg.edit("–û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        await message.respond(file=voice_path)
        os.remove(voice_path)

    async def convert_video(self, call: InlineCall, message: Message, to_format: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not message or not message.video:
            await call.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            return

        try:
            await call.edit(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ {to_format}...")
            file_path = await self.client.download_media(message.media)

            if self.get_audio_duration(file_path) > 180:
                await call.edit("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã.")
                os.remove(file_path)
                return

            audio = AudioSegment.from_file(file_path)
            output_path = (file_path.replace('.mp4', '.mp3') if to_format == "–º—É–∑—ã–∫—É" 
                           else file_path.replace('.mp4', '.ogg'))
            audio.export(output_path, format="mp3" if to_format == "–º—É–∑—ã–∫—É" else "ogg", codec="libopus" if to_format != "–º—É–∑—ã–∫—É" else None)

            os.remove(file_path)
            await message.respond(file=output_path)
            os.remove(output_path)

        except Exception as e:
            await call.edit(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def savev(self, message: Message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ>"""
        args = utils.get_args_raw(message)
        if not args or len(args) > 30:
            await message.respond("‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        reply = await message.get_reply_message()
        if not reply or not (reply.voice or (reply.file and reply.file.name and reply.file.name.endswith('.mp3'))):
            await message.respond("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ MP3.")
            return

        status_msg = await message.respond("–°–æ—Ö—Ä–∞–Ω—è—é...")
        file_path = await self.client.download_media(reply.media)

        if self.get_audio_duration(file_path) > 180:
            await status_msg.edit("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã.")
            os.remove(file_path)
            return

        save_path = os.path.join(self.records_dir, f"{args}.ogg" if reply.voice else f"{args}.mp3")
        os.rename(file_path, save_path)

        self.saved_records[args] = save_path
        self.save_records()
        await status_msg.edit(f"‚úÖ –ó–∞–ø–∏—Å—å '{args}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    @loader.command()
    async def getv(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∏–ª–∏ —Å–ø–∏—Å–æ–∫"""
        args = utils.get_args_raw(message)
        if not args:
            if not self.saved_records:
                await message.respond("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                return

            saved_list = ""
            for name, path in self.saved_records.items():
                duration = self.get_audio_duration(path)
                emoji = "üéôÔ∏è" if path.endswith('.ogg') else "üéµ"
                saved_list += f"{emoji} <code>{name}</code> - {duration//60}:{duration%60:02}\n"

            await message.respond(f"üìú –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n{saved_list}")
            return

        if args not in self.saved_records:
            await message.respond(f"‚ùå –ó–∞–ø–∏—Å—å '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        await message.respond(file=self.saved_records[args])

    @loader.command()
    async def delv(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∏–ª–∏ –≤—Å–µ"""
        args = utils.get_args_raw(message)

        if not args:
            if len(self.saved_records) == 1:
                name = next(iter(self.saved_records))
                await self.inline.form(
                    f"‚ùì –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å '{name}'?",
                    message,
                    [
                        {"text": "–î–∞", "callback": self.confirm_delete, "args": (name,)},
                        {"text": "–ù–µ—Ç", "callback": self.cancel_delete}
                    ]
                )
            else:
                await self.inline.form(
                    "‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?",
                    message,
                    [
                        {"text": "–î–∞", "callback": self.confirm_delete},
                        {"text": "–ù–µ—Ç", "callback": self.cancel_delete}
                    ]
                )
        elif args in self.saved_records:
            await self.inline.form(
                f"‚ùì –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å '{args}'?",
                message,
                [
                    {"text": "–î–∞", "callback": self.confirm_delete, "args": (args,)},
                    {"text": "–ù–µ—Ç", "callback": self.cancel_delete}
                ]
            )
        else:
            await message.respond(f"‚ùå –ó–∞–ø–∏—Å—å '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def confirm_delete(self, call: InlineCall, name=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        if name:
            path = self.saved_records.get(name)
            if path and os.path.exists(path):
                os.remove(path)
            self.saved_records.pop(name, None)
            await call.edit(f"üóëÔ∏è –ó–∞–ø–∏—Å—å '{name}' —É–¥–∞–ª–µ–Ω–∞.")
        else:
            for path in self.saved_records.values():
                if os.path.exists(path):
                    os.remove(path)
            self.saved_records.clear()
            await call.edit("üóëÔ∏è –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")

        self.save_records()

    async def cancel_delete(self, call: InlineCall):
        """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        await call.edit("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    @loader.command()
    async def conv(self, message: Message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª"""
        if message.is_reply:
            reply = await message.get_reply_message()
            if self.is_unsupported(reply):
                await message.respond("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, MP3 –∏ –≤–∏–¥–µ–æ.")
                return
            if reply.voice:
                await self.convert_to_mp3(reply)
            elif reply.file and reply.file.name and reply.file.name.endswith('.mp3'):
                await self.convert_to_voice(reply)
            elif reply.video:
                await self.inline.form(
                    "‚ùì –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤:",
                    message,
                    [
                        {"text": "–ú—É–∑—ã–∫—É", "callback": self.convert_video, "args": (reply, "–º—É–∑—ã–∫—É")},
                        {"text": "–ì–æ–ª–æ—Å–æ–≤–æ–µ", "callback": self.convert_video, "args": (reply, "–≥–æ–ª–æ—Å–æ–≤–æ–µ")}
                    ]
                )
            else:
                await message.respond("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, MP3 –∏ –≤–∏–¥–µ–æ.")
        else:
            await message.respond("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª.")
