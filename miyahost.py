# `7MMM.     ,MMF'`7MMM.     ,MMF'   `7MMM.     ,MMF'              `7MM
# MMMb    dPMM    MMMb    dPMM       MMMb    dPMM                  MM
# M YM   ,M MM    M YM   ,M MM       M YM   ,M MM  ,pW"Wq.    ,M""bMM  ,pP"Ybd
# M  Mb  M' MM    M  Mb  M' MM       M  Mb  M' MM 6W'   `Wb ,AP    MM  8I   `"
# M  YM.P'  MM    M  YM.P'  MM mmmmm M  YM.P'  MM 8M     M8 8MI    MM  `YMMMa.
# M  `YM'   MM    M  `YM'   MM       M  `YM'   MM YA.   ,A9 `Mb    MM  L.   I8
# .JML. `'  .JMML..JML. `'  .JMML.   .JML. `'  .JMML.`Ybmd9'   `Wbmd"MML.M9mmmP'
#
# (c) 2023 ‚Äî licensed under Apache 2.0 ‚Äî https://www.apache.org/licenses/LICENSE-2.0

# meta pic: https://img.icons8.com/stickers/344/block.png
# meta developer: @mm_mods

__version__ = "1.2"

import asyncio
from hikka import loader, utils
import telethon as tt
from telethon.tl.types import Message
import logging

logger = logging.getLogger(__name__)


@loader.tds
class MiyaHostMod(loader.Module):
    """Module to manage your miyahost."""
    strings = {
        "name": "miyahost.manager",
        "error": "üòµ <b>Error</b> ({}): {}",
        "success": "{} <b>Your container was successfully {}!</b> ({})",
        "err.NoAuthKeyProvided": "no auth key provided",
        "err.NoDBRecord": "you're not registered, not subscribed, or don't have a container",
        "err.Verlangsamt": "you're being rate limited. Try again at {}",
        "err.Banned": "you're banned from using this service",
        "err.InvalidAuthKey": "invalid auth key",
        "err.AuthNotEnabled": "API auth is not enabled",
        "err.APIServerDown": "API server isn't responding or down",
        "userinfo": "üë§ <b>User</b> <code>{}</code>:\nSubscribed? {}\nBanned? {}",
        "err.NoUser": "no such user",
        "state.started": "started",
        "state.stopped": "stopped",
        "state.restarted": "restarted"
    }

    strings_ru = {
        "name": "miyahost.manager",
        "error": "üòµ <b>–û—à–∏–±–∫–∞</b> ({}): {}",
        "success": "{} <b> –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ {}!</b> ({})",
        "err.NoAuthKeyProvided": "–Ω–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        "err.NoDBRecord": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
        "err.Verlangsamt": "–í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ {}",
        "err.Banned": "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã",
        "err.InvalidAuthKey": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        "err.AuthNotEnabled": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ API –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞",
        "err.APIServerDown": "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "userinfo": "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{}</code>:\n–ü–æ–¥–ø–∏—Å–∞–Ω? {}\n–ó–∞–±–∞–Ω–µ–Ω? {}",
        "err.NoUser": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–∞—à–∏–º miyahost.",
        "_cmd_doc_mhinfo": "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ miyahost.",
        "_cmd_doc_mhstart": "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.",
        "_cmd_doc_mhstop": "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.",
        "_cmd_doc_mhrestart": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.",
        "state.started": "–∑–∞–ø—É—â–µ–Ω",
        "state.stopped": "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "state.restarted": "–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    }

    strings_de = {
        "name": "miyahost.manager",
        "error": "üòµ <b>Fehler</b> ({}): {}",
        "success": "{} <b>Ihren Kontainer w√ºrde erfolgreich {}!</b> ({})",
        "err.NoAuthKeyProvided": "kein Authentifizierungsschl√ºssel angegeben",
        "err.NoDBRecord": "Sie sind nicht registriert, nicht abonniert oder haben keinen Container",
        "err.Verlangsamt": "Sie werden aufgrund von Rate-Limits eingeschr√§nkt. Versuchen Sie es erneut um {}",
        "err.Banned": "Sie sind von der Nutzung dieses Dienstes ausgeschlossen",
        "err.InvalidAuthKey": "ung√ºltiger Authentifizierungsschl√ºssel",
        "err.AuthNotEnabled": "API-Authentifizierung ist nicht aktiviert",
        "err.APIServerDown": "API-Server antwortet nicht oder ist nicht erreichbar",
        "userinfo": "üë§ <b>Nutzer</b> <code>{}</code>:\nAbonniert? {}\nGebannt? {}",
        "err.NoUser": "kein solcher Nutzer",
        "_cls_doc": "Modul zum Ihren miyahost beheren.",
        "_cmd_doc_mhinfo": "Zeigt Informationen √ºber den miyahost-Benutzer an.",
        "_cmd_doc_mhstart": "Startet Ihren Container.",
        "_cmd_doc_mhstop": "Stoppt Ihren Container.",
        "_cmd_doc_mhrestart": "Startet Ihren Container neu.",
        "state.started": "gestarted",
        "state.stopped": "gestoppt",
        "state.restarted": "neugestartet"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "auth_key",
                'NULL',
                lambda: "Basic auth key for miyahost API ‚Äî get it via @miyahostbot using /hhttpauth",
                validator=loader.validators.Hidden(loader.validators.RegExp(r'[a-zA-Z0-9]+|NULL'))
            ),
            loader.ConfigValue(
                "mock_id",
                'NULL',
                lambda: "Enter another person's ID to rule it's container having it's auth key",
                validator=loader.validators.RegExp(r'[0-9]+|NULL')
            )
        )

    async def mhinfocmd(self, m: Message):
        """Get info about miyahost user."""
        if not utils.get_args_raw(m) and not m.is_reply:
            user = m.from_id
        elif utils.get_args_raw(m) and not m.is_reply:
            user = utils.get_args_raw(m)
        else:
            user = (await m.get_reply_message()).from_id

        try:
            import requests
            req = requests.get(f"http://129.151.220.181:41154/mhapi/{user}").json()
        except Exception as e:
            return await utils.answer(m, self.strings("error").format(500, self.strings('err.APIServerDown')))

        if list(req.keys())[0] == "error":
            req = req["error"]
            if req[0] == 404:
                return await utils.answer(m, self.strings("error").format(404, self.strings("err.NoUser")))

        else:
            req = req["OK"]
            useri = req[1]
            subscr = f"‚úÖ ({useri['datumbis']})" if useri["activated"] else "‚ùå"
            banned = "‚úÖ" if useri["banned"] else "‚ùå"
            return await utils.answer(m, self.strings("userinfo").format(user, subscr, banned))

    async def mhstartcmd(self, m: Message):
        """Start miyahost container."""
        mock = False
        user = m.from_id
        if self.config["auth_key"] == 'NULL':
            return await utils.answer(m, self.strings("error").format(403, self.strings("err.NoAuthKeyProvided")))
        if self.config['mock_id'] != 'NULL':
            user = self.config['mock_id']
            mock = True

        try:
            import requests
            req = requests.get(
                f"http://129.151.220.181:41154/mhapi/controls/start/{user}",
                params={"basic_key": self.config["auth_key"]}
            ).json()
        except Exception as e:
            return await utils.answer(m, self.strings("error").format(500, self.strings('err.APIServerDown')))

        if list(req.keys())[0] == "error":
            req = req["error"]
            if req[0] == 404:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(404, self.strings("err.NoDBRecord")))
            elif req[0] == 401:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(401, self.strings("err.InvalidAuthKey")))
            elif req[0] == 429:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(429, self.strings("err.Verlangsamt").format(req[2])))
            elif req[0] == 403 and "banned" in req[1]:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.Banned")))
            elif req[0] == 403:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.AuthNotEnabled")))

        else:
            emoji = '(‚ö´) ‚ñ∂' if mock else '‚ñ∂'
            return await utils.answer(m, self.strings("success").format(emoji, self.strings("state.started"), user))

    async def mhstopcmd(self, m: Message):
        """Stop miyahost container."""
        user = m.from_id
        mock = False
        if self.config["auth_key"] == 'NULL':
            return await utils.answer(m, self.strings("error").format(403, self.strings("err.NoAuthKeyProvided")))
        if self.config['mock_id'] != 'NULL':
            user = self.config['mock_id']
            mock = True

        emoji = '(‚ö´) ‚è∏' if mock else '‚è∏'
        await utils.answer(m, self.strings("success").format(emoji, self.strings("state.stopped"), user))

        try:
            import requests
            req = requests.get(
                f"http://129.151.220.181:41154/mhapi/controls/stop/{user}",
                params={"basic_key": self.config["auth_key"]}
            ).json()
        except Exception as e:
            return await utils.answer(m, self.strings("error").format(500, self.strings('err.APIServerDown')))

        if list(req.keys())[0] == "error":
            req = req["error"]
            if req[0] == 404:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(404, self.strings("err.NoDBRecord")))
            elif req[0] == 401:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(401, self.strings("err.InvalidAuthKey")))
            elif req[0] == 429:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(429, self.strings("err.Verlangsamt").format(
                    req[2])))
            elif req[0] == 403 and "banned" in req[1]:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.Banned")))
            elif req[0] == 403:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.AuthNotEnabled")))

        else:
            return

    async def mhrestartcmd(self, m: Message):
        """Restart miyahost container."""
        user = m.from_id
        mock = False
        if self.config["auth_key"] == 'NULL':
            return await utils.answer(m, self.strings("error").format(403, self.strings("err.NoAuthKeyProvided")))
        if self.config['mock_id'] != 'NULL':
            user = self.config['mock_id']
            mock = True

        emoji = '(‚ö´) üîÅ' if mock else 'üîÅ'
        await utils.answer(m, self.strings("success").format(emoji, self.strings("state.restarted"), user))

        try:
            import requests
            req = requests.get(
                f"http://129.151.220.181:41154/mhapi/controls/restart/{user}",
                params={"basic_key": self.config["auth_key"]}
            ).json()
        except Exception as e:
            return await utils.answer(m, self.strings("error").format(500, self.strings('err.APIServerDown')))

        if list(req.keys())[0] == "error":
            req = req["error"]
            if req[0] == 404:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(404, self.strings("err.NoDBRecord")))
            elif req[0] == 401:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(401, self.strings("err.InvalidAuthKey")))
            elif req[0] == 429:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(429, self.strings("err.Verlangsamt").format(
                    req[2])))
            elif req[0] == 403 and "banned" in req[1]:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.Banned")))
            elif req[0] == 403:
                logging.error(f'Failed with request to http://129.151.220.181:41154/mhapi/controls/start/{user}?basic_key={self.config["auth_key"]}, got {req[0]}')
                return await utils.answer(m, self.strings("error").format(403, self.strings("err.AuthNotEnabled")))

        else:
            return